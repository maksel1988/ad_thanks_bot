#!/usr/bin/env python3
import logging
import psycopg2
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram import executor
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not API_TOKEN:
    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
    exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL
DB_CONFIG = {
    "dbname": os.getenv('DB_NAME', 'thanks_bot_db'),
    "user": os.getenv('DB_USER', 'bot_user'),
    "password": os.getenv('DB_PASSWORD', 'secure_password'),
    "host": os.getenv('DB_HOST', 'localhost')
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS thanks_messages (
                id SERIAL PRIMARY KEY,
                sender_id BIGINT NOT NULL,
                sender_username VARCHAR(100),
                recipient_username VARCHAR(100) NOT NULL,
                message_text TEXT NOT NULL,
                message_date DATE NOT NULL DEFAULT CURRENT_DATE,
                created_at TIMESTAMP NOT NULL DEFAULT NOW()
            )
        """)
        
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_message_date 
            ON thanks_messages(message_date)
        """)
        
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_recipient 
            ON thanks_messages(recipient_username)
        """)
        
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise
    finally:
        if conn:
            conn.close()

async def save_to_db(message: types.Message, recipient: str, text: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT INTO thanks_messages 
            (sender_id, sender_username, recipient_username, message_text, message_date)
            VALUES (%s, %s, %s, %s, %s)
            RETURNING id
        """, (
            message.from_user.id,
            message.from_user.username,
            recipient,
            text,
            datetime.now().strftime('%d-%m-%Y')
        ))
        
        message_id = cursor.fetchone()[0]
        conn.commit()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{message_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        return False
    finally:
        if conn:
            conn.close()

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    try:
        await message.reply(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>@username —Ç–µ–∫—Å—Ç_–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>@kolya —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º!</code>\n\n"
            "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –Ω–∞—à—É –±–∞–∑—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π üíæ",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {e}")

@dp.message_handler(commands=['stats'])
async def show_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute("SELECT COUNT(*) FROM thanks_messages")
        total = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        cursor.execute("""
            SELECT recipient_username, COUNT(*) as cnt 
            FROM thanks_messages 
            GROUP BY recipient_username 
            ORDER BY cnt DESC 
            LIMIT 5
        """)
        top_recipients = "\n".join(
            [f"{row[0]} - {row[1]}" for row in cursor.fetchall()]
        )
        
        await message.reply(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π:\n\n"
            f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total}\n\n"
            f"–¢–æ–ø-5 –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:\n{top_recipients}",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    finally:
        if conn:
            conn.close()

@dp.message_handler()
async def process_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        text = message.text.strip()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
        parts = text.split(maxsplit=1)
        
        if len(parts) < 2:
            await message.reply("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ @username –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        username, user_message = parts
        username = username.strip()
        user_message = user_message.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @
        if not username.startswith('@'):
            await message.reply("‚ùå –ü–µ—Ä–≤—ã–º —Å–ª–æ–≤–æ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å @username")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = await save_to_db(message, username, user_message)
        
        if success:
            await message.reply(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                f"üë§ –ö–æ–º—É: <code>{username}</code>\n"
                f"üìù –¢–µ–∫—Å—Ç: <code>{user_message}</code>\n"
                f"üìÖ –î–∞—Ç–∞: <code>{datetime.now().strftime('%d-%m-%Y')}</code>",
                parse_mode='HTML'
            )
        else:
            await message.reply("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await init_db()
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    executor.start_polling(
        dp, 
        skip_updates=True,
        on_startup=on_startup
    )
